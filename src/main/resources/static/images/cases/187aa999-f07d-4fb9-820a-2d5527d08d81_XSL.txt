<?xml version="1.0"?>
//feuilles de style sont un ensemble de template
<xsl:stylesheet xmlns:xsl=".....">//transforme est valable et equivalente a stylesheet
   
     <xsl:template match="/"> // template racine //un template qui correspond a la racine
		<html>
			<body>
				<h1>la liste des etudiants dont l age est inf a 30 </h1>
				<ol>
					<xsl:for-each select="/liste/etudiant"> // "liste/etudiant"=>>> expression xpath //boucler sur le fichier xml qui est un ensemble des noeuds 
						<li>bonjour</li> 
					
		</xsl:for-each>xsl:template>
			</ol>
			</body>
<			</html>


xsl ======>>>>>>> un langage de transformation 
xpath ========>>> langage qui permet de naviguer sur un fichier xml

<?xml version="1.0"?>
//feuilles de style sont un ensemble de template
<xsl:stylesheet xmlns:xsl=".....">//transforme est valable et equivalente a stylesheet
   
     <xsl:template match="/">   // template racine //un template qui correspond a la racine
		<html>
			<body>
				<h1>la liste des etudiants dont l age est inf a 30 </h1>
				<ol>
					[<xsl:for-each select="/liste/etudiant"> <xsl:for-each select="/liste/etudiant[moyenne>=10]">//predicat // "liste/etudiant"=>>> expression xpath //boucler sur le fichier xml qui est un ensemble des noeuds 101
					
					<xsl:if test="moyenne > 10 "> &gt; =====>> supérieur
						<li>
							<xsl:value-of select="nom"/>
							<xsl:choose>
							<xsl:when test="moyenne >16 ">
							       très bien 
							</xsl:when>
							<xsl:when test="moyenne >14 ">
							         bien 
							</xsl:when>
							<xsl:when test="moyenne < 14  ">
							        Assez bien 
							</xsl:when>
							<xsl:otherwise>
							        ajourné
						       </xsl:otherwise>
							

							</xsl:choose>


							<li>							
							<xsl:value-of select="./nom" />  //value-of ====>> prend une seule valeur select=====>>expression xpath sur le noeud

							</li> 
					</xsl:if>
                        		</xsl:for-each>]
					</ol>   ////// on le remplace par <xsl:apply-templates select="/liste/etudiant"> <xsl:sort select="nom" data-type="text" ........../> appliquer toutes les templates de l'etudiant
/////apres on fait le sort 
			</body>
		</html>

</xsl:template>
<xsl:template match="/liste/etudiant">
<xsl:for-each select="/liste/etudiant"> <xsl:for-each select="/liste/etudiant[moyenne>=10]">//predicat // "liste/etudiant"=>>> expression xpath //boucler sur le fichier xml qui est un ensemble des noeuds 101
					
					<xsl:if test="moyenne > 10 "> &gt; =====>> supérieur
						<li>
							<xsl:value-of select="nom"/>
							<xsl:choose>
							<xsl:when test="moyenne >16 ">
							       très bien 
							</xsl:when>
							<xsl:when test="moyenne >14 ">
							         bien 
							</xsl:when>
							<xsl:when test="moyenne < 14  ">
							        Assez bien 
							</xsl:when>
							<xsl:otherwise>
							        ajourné
						       </xsl:otherwise>
							

							</xsl:choose>


							<li>							
							<xsl:value-of select="./nom" />  //value-of ====>> prend une seule valeur select=====>>expression xpath sur le noeud

							</li> 
					</xsl:if>
                        		</xsl:for-each>


/parent/enfant[condition]/enfant2[]/ ++++++ /parent/enfant[condition1][condition2]/....   =======>>>> le langage xpath

utiliser autre templates:
<xsl:sort select =====>>>> trier


*****afficher une photo
<img> <xsl:attribute name="src"><xsl:value-of select="photo/@source" ></xsl:attribute></img>
***les fonctions XSL
le nombre de jeux de noeud
<xsl:for-each select="/liste/etudiant">
.count()
.sum() //la somme
</xsl:...>

<h1>liste des etudiants (nombre) 
<xsl:value-of select="Count(/liste/etudiant)" /></h1> ====>>> le nombre des etudiants
<xsl:value-of select="sum(/liste/etudiant)" />

pour calculer ou effectuer toutes les oparations arithmetique
<xsl:value-of select="TVA*PRIX HT">
les operations = +  : * : div /- 
***pour afficher les noeuds :
===>>> chaque etudiant a une position bien precise 
<xsl:value-of select="/liste/etudiant[position() ]"> position() ==>> la position  last() ====>>> la derniere position last()-1
**format_number == formater les nombres
**ceiling====>>> la valeur la  plus seperieur 12.95==== 13 
**floor =====>>> la valeur basse 12.95 ==== 12
**round ====>> la valeur la plus proche 12.45 ==== 12.5 

*******STRING ********************************************************************
substring === <xsl:value-of select="substring(prenom,n,m)">
substring-before =====<xsl:value-of select="substring(nom,'$')"> selectionner le caractere avant $
**<xsl:value-of select="translate(nom,'abcd....z','******')> remplacer le mot de passe en etoiles une chaine va etre traduit en etoiles

















	
	
	

